# CircleCI build config to test different versions of Singuarity
version: 2.1

orbs:
  # https://circleci.com/orbs/registry/orb/circleci/docker-publish
  docker-publish: circleci/docker-publish@0.1.3

workflows:
  version: 2

  # This workflow will be run on all branches but master (to test)
  build_without_publishing_job:
    jobs:

      - docker-publish/publish:
          image: vanessa/watchme
          dockerfile: docker/Dockerfile
          deploy: false
          tag: latest
          filters:
            branches:
              ignore: 
                - master
          after_build:
            - run:
                name: Preview Containers that will be Deployed
                command: |
                   # Here we preview the Docker Tag
                   for string in $(cat watchme/version.py | grep __version__); do
                          DOCKER_TAG="${string//\"}"
                   done
                   echo "Version for Docker tag is ${DOCKER_TAG}"
                   echo "This build will deploy the following containers:"
                   echo "vanessa/watchme:latest"
                   echo "vanessa/watchme:py3"
                   echo "vanessa/watchme:v${DOCKER_TAG}"
                   echo "vanessa/watchme:py3-v${DOCKER_TAG}"

      - docker-publish/publish:
          image: vanessa/watchme
          dockerfile: docker/Dockerfile.py2
          deploy: false
          tag: py2
          filters:
            branches:
              ignore: 
                - master
          after_build:
            - run:
                name: Preview Containers that will be Deployed
                command: |
                   # Here we preview the Docker Tag
                   for string in $(cat watchme/version.py | grep __version__); do
                          DOCKER_TAG="${string//\"}"
                   done
                   echo "Version for Docker tag is ${DOCKER_TAG}"
                   echo "This build will deploy the following containers:"
                   echo "vanessa/watchme:py2"
                   echo "vanessa/watchme:py2-${DOCKER_TAG}"


  # This workflow will deploy images on merge to master only
  docker_with_lifecycle:
    jobs:

      - docker-publish/publish:
          image: vanessa/watchme
          dockerfile: docker/Dockerfile
          tag: latest
          filters:
            branches:
             only: master
          after_build:
            - run:
                name: Publish Docker Containers with Python Version 3
                command: |
                   # Here we preview the Docker Tag
                   for string in $(cat watchme/version.py | grep __version__); do
                          DOCKER_TAG="${string//\"}"
                   done
                   echo "Version for Docker tag is ${DOCKER_TAG}"
                   docker tag vanessa/watchme:latest vanessa/watchme:v${DOCKER_TAG}
                   docker tag vanessa/watchme:latest vanessa/watchme:py3-v${DOCKER_TAG}
                   docker tag vanessa/watchme:latest vanessa/watchme:py3

      - docker-publish/publish:
          image: vanessa/watchme
          dockerfile: docker/Dockerfile.py2
          tag: py2
          filters:
            branches:
             only: master
          after_build:
            - run:
                name: Publish Docker Containers with Python Version 2
                command: |
                   # Here we preview the Docker Tag
                   for string in $(cat watchme/version.py | grep __version__); do
                          DOCKER_TAG="${string//\"}"
                   done
                   echo "Version for Docker tag is ${DOCKER_TAG}"
                   docker tag vanessa/watchme:py2 vanessa/watchme:py2-v${DOCKER_TAG}

  test:
    jobs:
      - test-watchme-python-3:
          filters:
            branches:
              ignore: docs/*
      - test-watchme-python-2:
          filters:
            branches:
              ignore: docs/*


install_watchme: &install_watchme
  name: install watchme
  command: |
     $HOME/conda/bin/pip uninstall watchme --yes || echo "Not installed"
     $HOME/conda/bin/pip install .[all]


commands:
  install_python:
    parameters:
      python:
        type: integer
        description: "Python version: 2 or 3"
    steps:
      - run: |
          PYTHON_VERSION="<< parameters.python >>"
          CONDA_PATH="$HOME/conda/Python${PYTHON_VERSION}"
          echo 'export PATH="'"$CONDA_PATH"'/bin:$PATH"' >> "$BASH_ENV"
          source "$BASH_ENV"
          if [ ! -d "$CONDA_PATH" ]; then
              CONDA_SCRIPT=Miniconda${PYTHON_VERSION}-latest-Linux-x86_64.sh
              wget https://repo.anaconda.com/miniconda/$CONDA_SCRIPT
              /bin/bash $CONDA_SCRIPT -b -p $CONDA_PATH
          else
              echo "Miniconda is already installed, continuing to build."
          fi
          python --version
          [ $(python -c'import sys;print(sys.version_info.major)') -eq $PYTHON_VERSION ]

          pip install --upgrade pylint pytest


run_linter: &run_linter
  name: run linter
  command: |
     cd /tmp/src
     pylint watchme


test_watchme_python: &test_watchme_python
  name: Test WatchMe Python
  command: |
        cd ~/repo/watchme/tests
        $HOME/conda/bin/python -m unittest test_client
        $HOME/conda/bin/python -m unittest test_utils
        $HOME/conda/bin/python -m unittest test_decorators

test_watchme_bash: &test_watchme_bash
  name: Test WatchMe Client
  command: |
        cd ~/repo/watchme/tests
        export PATH=$HOME/conda/bin:$PATH
        /bin/bash test_utils.sh
        /bin/bash test_client.sh
        /bin/bash test_watchers.sh


jobs:
  test-watchme-python: &base_job
    name: "Watchme With Python 3"
    parameters:
        python:
          type: integer
          description: "Python version: 2 or 3"
          default: 3
    machine: true
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies
      - install_dependencies:
          python: << parameters.python >>
      - run: *install_python
      - run: *install_watchme
      - save_cache:
          paths:
            - /home/circleci/conda
          key: v1-dependencies
      - run: *test_watchme_python
      - run: *test_watchme_bash

  test-watchme-python-2:
      <<: *base_job
      name: "Watchme With Python 2"
      python: 2
